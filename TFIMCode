# Setting up the basics 
import numpy as np
import qutip as qt
import math
from numpy.linalg import eig

#n is number of qubits, l is number of qubits teleported, m is number of layers of encoding
n = 10
l = 5
k = n-l
m = 5
PBC = False

# # Kronecker product between two Pauli operators
# kronecker_product = qt.tensor(pauli_x, pauli_y)

#defining plus and minus states
vector1 = np.array([1, 1])
plus = qt.Qobj(vector1)

vector2 = np.array([1, -1])
minus = qt.Qobj(vector2)

#input state
fixed = qt.qeye(1)
for i in range(k):
    fixed = qt.tensor(fixed,plus)


inchannel = qt.tensor(qt.qeye(2**l), fixed)
inchannel = np.array(inchannel)
print(inchannel)


# Define Pauli X, Y, and Z matrices
p_x = qt.sigmax()
p_y = qt.sigmay()
p_z = qt.sigmaz()
eye = qt.qeye(2)

# Define the Pauli X,Y,Z on respective sites using kronecker product for a n-qubit system

def x(i):
    output = qt.qeye(2**(i-1))
    output = qt.tensor(output, p_x)
    output = qt.tensor(output, qt.qeye(2**(n-i)))
    output.dims = [[2**n], [2**n]]
    # Treat the operator as an operator on a single quantum system with 2^n levels
    # (it doesn't matter for me its just a QuTip annoying classification)
    return output
def y(i):
    output = qt.qeye(2**(i-1))
    output = qt.tensor(output, p_y)
    output = qt.tensor(output, qt.qeye(2**(n-i)))
    output.dims = [[2**n], [2**n]]
    return output
def z(i):
    output = qt.qeye(2**(i-1))
    output = qt.tensor(output, p_z)
    output = qt.tensor(output, qt.qeye(2**(n-i)))
    output.dims = [[2**n], [2**n]]
    return output
def sqrt(num):
    return math.sqrt(num)


#one layer of unitary encoding, first on the odd-even sites U(2i+1) followed by even-odd sites U(2i)

outchannel = qt.qeye(2**n)
for layers in range(m):
    for i in range(1,n+1,2):
        if i+1 <= n:
            outchannel = outchannel * (z(i)*z(i+1)+x(i))


    for i in range(2,n+1,2):
        if i+1 <= n:
            outchannel = outchannel * (z(i)*z(i+1)+x(i))



print('This is the unitary transformation produced by the encoding')
print(outchannel)

pre_measure = outchannel * inchannel 
print('This is the channel for both input and encoding')
print(pre_measure)

#all possible measurement outcomes

def generate_binary_strings(l):
    if l == 0:
        return ['']
    else:
        previous_strings = generate_binary_strings(l - 1)
        new_strings = []
        for string in previous_strings:
            new_strings.append(string + '0')
            new_strings.append(string + '1')
        return new_strings
binary_strings = generate_binary_strings(k)

def outcome(string):
    state = qt.qeye(1)
    for i in string:
        if i == '0':
            state = qt.tensor(state, plus)
        if i == '1':
            state = qt.tensor(state, minus)
    return state

born = []
for string in binary_strings:
    born.append(outcome(string))
print('this is the list of outcomes, just permuting over all possible measurement outcomes')
print('the size of list should decrease as you teleport more qubits because you are measuring less qubits')
print(born)

for outcome in born:
    outcome = qt.tensor(outcome , qt.qeye(2**l))
    outcome = qt.dag(outcome)
    print('this is the measurement combined with identity on the spots where we didnt measure - we want to teleport those')
    # Convert the Qobj objects to NumPy arrays
    measure_outcomes = np.array(outcome)
    print(measure_outcomes)

    print('this is the net effect of the channel. we want to check that the eigenvalues are all norm 1 after normalization so its confirm unitary')
    # Multiply the matrices
    channel = measure_outcomes @ pre_measure
    w,v=eig(channel)
    rounded_eigenvalues = np.around(w/norm, decimals=5)
    print('E-value:', rounded_eigenvalues)
    for eigval in rounded_eigenvalues:
        if eigval == 0.+0.j :
            raise Exception("Sad, Channel is not invertible")
    raise Exception("Yay, Channel is invertible")

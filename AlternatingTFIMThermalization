# import numpy as np
from qutip import *
import matplotlib.pyplot as plt

def even_time(t, args):
    """Returns 1 at even time steps and 0 at odd time steps."""
    return 1 if int(t) % 2 == 0 else 0

def odd_time(t, args):
    """Returns 0 at even time steps and 1 at odd time steps."""
    return 1 - even_time(t, args)

def construct_hamiltonian(n, J, h):
    """Constructs the time-dependent Hamiltonian for n qubits."""
    sz = sigmaz()
    sx = sigmax()
    
    H_even = 0
    H_odd = 0

    # Even sites
    for i in range(0, n - 1, 2):
        H_even -= J * tensor([sz if j == i or j == i + 1 else qeye(2) for j in range(n)])
    for i in range(0, n, 2):
        H_even -= h * tensor([sx if j == i else qeye(2) for j in range(n)])

    # Odd sites
    for i in range(1, n - 1, 2):
        H_odd -= J * tensor([sz if j == i or j == i + 1 else qeye(2) for j in range(n)])
    for i in range(1, n, 2):
        H_odd -= h * tensor([sx if j == i else qeye(2) for j in range(n)])
    
    # Time-dependent Hamiltonian
    H = [[H_odd, odd_time], [H_even, even_time]]

    return H

def evolve_system(H, psi0, tlist):
    """Evolves the quantum system using mesolve."""
    return mesolve(H, psi0, tlist, [], [])

def compute_reduced_density_matrix(state, subsystem_indices):
    """Computes the reduced density matrix for the given subsystem."""
    return state.ptrace(subsystem_indices)

# Parameters
n = 14  # Number of qubits
J = 1.0
h = 1.0
tlist = np.linspace(0, 20, 20)

# Construct Hamiltonian
H = construct_hamiltonian(n, J, h)


# Initial state (Here, all spins down)
psi0 = tensor([basis(2, 0) for _ in range(n)])

# Time evolution
result = evolve_system(H, psi0, tlist)

# Subsystem of interest (e.g., qubits 1 to 3 for a 4 qubit system)
subsystem_indices = [3,4]

# Calculate reduced density matrix for the subsystem at all time steps
rho_reduced_list = [compute_reduced_density_matrix(state, subsystem_indices) for state in result.states]

# Calculate von Neumann entropy list
entropy_list = [entropy_vn(rho) for rho in rho_reduced_list]

# Print the von Neumann entropy for each time step
for i, entropy in enumerate(entropy_list):
    print(f"Time step {i}: Von Neumann Entropy = {entropy}")

time = [i for i in range(20)]    


# Plotting the entanglement entropy
plt.plot(time, entropy_list, marker='o')
plt.xlabel('time')
plt.ylabel('Entanglement Entropy')
plt.title('Entanglement Entropy vs. time')
plt.grid(True)
plt.show()
